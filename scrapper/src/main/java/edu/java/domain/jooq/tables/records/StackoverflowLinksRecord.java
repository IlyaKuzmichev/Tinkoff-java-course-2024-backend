/*
 * This file is generated by jOOQ.
 */

package edu.java.domain.jooq.tables.records;

import edu.java.domain.jooq.tables.StackoverflowLinks;
import java.beans.ConstructorProperties;
import java.time.OffsetDateTime;
import javax.annotation.processing.Generated;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.annotations.Nullable;
import org.jooq.Field;
import org.jooq.Record1;
import org.jooq.Record3;
import org.jooq.Row3;
import org.jooq.impl.UpdatableRecordImpl;

/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "https://www.jooq.org",
        "jOOQ version:3.18.9"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({"all", "unchecked", "rawtypes", "this-escape"})
public class StackoverflowLinksRecord extends UpdatableRecordImpl<StackoverflowLinksRecord>
    implements Record3<Long, OffsetDateTime, Integer> {

    private static final long serialVersionUID = 1L;

    /**
     * Setter for <code>STACKOVERFLOW_LINKS.LINK_ID</code>.
     */
    public void setLinkId(@NotNull Long value) {
        set(0, value);
    }

    /**
     * Getter for <code>STACKOVERFLOW_LINKS.LINK_ID</code>.
     */
    @jakarta.validation.constraints.NotNull
    @NotNull
    public Long getLinkId() {
        return (Long) get(0);
    }

    /**
     * Setter for <code>STACKOVERFLOW_LINKS.LAST_UPDATE</code>.
     */
    public void setLastUpdate(@Nullable OffsetDateTime value) {
        set(1, value);
    }

    /**
     * Getter for <code>STACKOVERFLOW_LINKS.LAST_UPDATE</code>.
     */
    @Nullable
    public OffsetDateTime getLastUpdate() {
        return (OffsetDateTime) get(1);
    }

    /**
     * Setter for <code>STACKOVERFLOW_LINKS.ANSWERS_COUNT</code>.
     */
    public void setAnswersCount(@Nullable Integer value) {
        set(2, value);
    }

    /**
     * Getter for <code>STACKOVERFLOW_LINKS.ANSWERS_COUNT</code>.
     */
    @Nullable
    public Integer getAnswersCount() {
        return (Integer) get(2);
    }

    // -------------------------------------------------------------------------
    // Primary key information
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Record1<Long> key() {
        return (Record1) super.key();
    }

    // -------------------------------------------------------------------------
    // Record3 type implementation
    // -------------------------------------------------------------------------

    @Override
    @NotNull
    public Row3<Long, OffsetDateTime, Integer> fieldsRow() {
        return (Row3) super.fieldsRow();
    }

    @Override
    @NotNull
    public Row3<Long, OffsetDateTime, Integer> valuesRow() {
        return (Row3) super.valuesRow();
    }

    @Override
    @NotNull
    public Field<Long> field1() {
        return StackoverflowLinks.STACKOVERFLOW_LINKS.LINK_ID;
    }

    @Override
    @NotNull
    public Field<OffsetDateTime> field2() {
        return StackoverflowLinks.STACKOVERFLOW_LINKS.LAST_UPDATE;
    }

    @Override
    @NotNull
    public Field<Integer> field3() {
        return StackoverflowLinks.STACKOVERFLOW_LINKS.ANSWERS_COUNT;
    }

    @Override
    @NotNull
    public Long component1() {
        return getLinkId();
    }

    @Override
    @Nullable
    public OffsetDateTime component2() {
        return getLastUpdate();
    }

    @Override
    @Nullable
    public Integer component3() {
        return getAnswersCount();
    }

    @Override
    @NotNull
    public Long value1() {
        return getLinkId();
    }

    @Override
    @Nullable
    public OffsetDateTime value2() {
        return getLastUpdate();
    }

    @Override
    @Nullable
    public Integer value3() {
        return getAnswersCount();
    }

    @Override
    @NotNull
    public StackoverflowLinksRecord value1(@NotNull Long value) {
        setLinkId(value);
        return this;
    }

    @Override
    @NotNull
    public StackoverflowLinksRecord value2(@Nullable OffsetDateTime value) {
        setLastUpdate(value);
        return this;
    }

    @Override
    @NotNull
    public StackoverflowLinksRecord value3(@Nullable Integer value) {
        setAnswersCount(value);
        return this;
    }

    @Override
    @NotNull
    public StackoverflowLinksRecord values(
        @NotNull Long value1,
        @Nullable OffsetDateTime value2,
        @Nullable Integer value3
    ) {
        value1(value1);
        value2(value2);
        value3(value3);
        return this;
    }

    // -------------------------------------------------------------------------
    // Constructors
    // -------------------------------------------------------------------------

    /**
     * Create a detached StackoverflowLinksRecord
     */
    public StackoverflowLinksRecord() {
        super(StackoverflowLinks.STACKOVERFLOW_LINKS);
    }

    /**
     * Create a detached, initialised StackoverflowLinksRecord
     */
    @ConstructorProperties({"linkId", "lastUpdate", "answersCount"})
    public StackoverflowLinksRecord(
        @NotNull Long linkId,
        @Nullable OffsetDateTime lastUpdate,
        @Nullable Integer answersCount
    ) {
        super(StackoverflowLinks.STACKOVERFLOW_LINKS);

        setLinkId(linkId);
        setLastUpdate(lastUpdate);
        setAnswersCount(answersCount);
        resetChangedOnNotNull();
    }

    /**
     * Create a detached, initialised StackoverflowLinksRecord
     */
    public StackoverflowLinksRecord(edu.java.domain.jooq.tables.pojos.StackoverflowLinks value) {
        super(StackoverflowLinks.STACKOVERFLOW_LINKS);

        if (value != null) {
            setLinkId(value.getLinkId());
            setLastUpdate(value.getLastUpdate());
            setAnswersCount(value.getAnswersCount());
            resetChangedOnNotNull();
        }
    }
}
